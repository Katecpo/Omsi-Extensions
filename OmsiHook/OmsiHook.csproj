<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>net6.0-windows</TargetFramework>
		<Authors>Thomas Mathieson et al</Authors>
		<Copyright>Copyright Thomas Mathieson 2023 all rights reserved</Copyright>
		<PackageProjectUrl>https://github.com/space928/Omsi-Extensions</PackageProjectUrl>
		<RepositoryUrl>https://github.com/space928/Omsi-Extensions</RepositoryUrl>
		<PackageLicenseFile></PackageLicenseFile>
		<Description>OmsiHook is a simple library for hooking into Omsi's memory for modding.</Description>
		<PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<AssemblyVersion>2.4.1.1</AssemblyVersion>
		<FileVersion>2.4.1.1</FileVersion>
		<Version>2.4.1</Version>
		<PackageLicenseExpression>LGPL-3.0-only</PackageLicenseExpression>
		<SignAssembly>False</SignAssembly>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<PackageIcon>Logo.png</PackageIcon>
		<IncludeSymbols>true</IncludeSymbols>
		<SymbolPackageFormat>snupkg</SymbolPackageFormat>
		<Nullable>disable</Nullable>
		<Platforms>x86</Platforms>
		<GenerateDocumentationFile>False</GenerateDocumentationFile>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x86'" />
	
	<PropertyGroup>
		<BuildDocFx>true</BuildDocFx>
		<DocfxConfigFile>$(MSBuildProjectDirectory)/docs/docfx.json</DocfxConfigFile>
		<PreviewOutputFolder>$(MSBuildProjectDirectory)/docs/_site</PreviewOutputFolder>
		<MetadataOutputFolder>$(MSBuildProjectDirectory)/docs</MetadataOutputFolder>
		<LogFile>$(MSBuildProjectDirectory)/docs/docfx_log.txt</LogFile>
		<LogLevel>Info</LogLevel>
	</PropertyGroup>

	<ItemGroup>
		<None Include="..\.editorconfig" Link=".editorconfig" />
		<None Include="..\Logo.png" Link="images\Logo.png">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
		<None Include="..\README.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
		<None Include="..\$(Configuration)\OmsiHookInvoker.dll" Link="OmsiHookInvoker.dll">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Pack>True</Pack>
			<PackagePath>\lib\net6.0</PackagePath>
		</None>
		<None Include="..\OmsiHookRPCPlugin\bin\x86\$(Configuration)\$(TargetFramework)\OmsiHookRPCPlugin.dll" Link="OmsiHookRPCPlugin.dll">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Pack>True</Pack>
			<PackagePath>\lib\net6.0</PackagePath>
		</None>
		<None Include="..\OmsiHookRPCPlugin\bin\x86\$(Configuration)\$(TargetFramework)\OmsiHookRPCPluginNE.dll" Link="OmsiHookRPCPluginNE.dll">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Pack>True</Pack>
			<PackagePath>\lib\net6.0</PackagePath>
		</None>
		<None Include="..\OmsiHookRPCPlugin\bin\x86\$(Configuration)\$(TargetFramework)\OmsiHookRPCPlugin.opl" Link="OmsiHookRPCPlugin.opl">
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Pack>True</Pack>
			<PackagePath>\lib\net6.0</PackagePath>
		</None>
	</ItemGroup>
	
	<ItemGroup>
		<PackageReference Include="docfx.console" Version="2.59.4">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
			<GeneratePathProperty>True</GeneratePathProperty>
		</PackageReference>
		<PackageReference Include="memberpage" Version="2.59.4" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\OmsiHookInvoker\OmsiHookInvoker.vcxproj">
			<ReferenceOutputAssembly>false</ReferenceOutputAssembly>
		</ProjectReference>
		<ProjectReference Include="..\OmsiHookRPCPlugin\OmsiHookRPCPlugin.csproj" />
	</ItemGroup>

	<!--Hack to fix docfx build bug... For some reason sometimes docfx tries to load the wrong version of System.Memory.dll; as 
		a workaround we can delete docfx's copy of System.Memory.dll and let it use MSBuild's one which *should* work.-->
	<Target Name="PreBuild" BeforeTargets="PreBuildEvent">
	  <Exec Command="set &quot;DocFXMemory=$(Pkgdocfx_console)\tools\System.Memory.dll&quot;&#xD;&#xA;if exist &quot;%25DocFXMemory%25&quot; (&#xD;&#xA;  echo &quot;Applying docfx build workaround (deleting docfx's copy of System.Memory.dll)...&quot;&#xD;&#xA;  del /q &quot;%25DocFXMemory%25&quot;&#xD;&#xA;) else (&#xD;&#xA;  echo &quot;DBG: File doesn't exist %25DocFXMemory%25&quot;&#xD;&#xA;)" />
	</Target>

</Project>
